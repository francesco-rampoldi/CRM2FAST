<?xml version="1.0"?>
<doc>
<assembly>
<name>
TopLibrary
</name>
</assembly>
<members>
<member name="M:Topgraf.Alarms.AlarmManager.#ctor(System.TimeSpan)">
	<summary>
	</summary>
	<param name="cycleTime"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Alarms.AlarmManager.Run">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Topgraf.Alarms.AlarmManager.ProcessAlarms">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Topgraf.Alarms.AlarmManager.SendEmail(Topgraf.tAllarmi@,Topgraf.tAllarmiInEsame@,System.Boolean)">
	<summary>
	</summary>
	<param name="alarm"></param>
	<param name="statusControl"></param>
	<param name="active"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.FileSystem.FileManager.ReadBinaryFile(System.String)">
	<summary>
 Read binary file content
 </summary>
	<param name="filePath">File path</param>
	<returns>Content of file as byte array</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.FileSystem.FileManager.ReadTextFile(System.String)">
	<summary>
 Read text file content
 </summary>
	<param name="filePath">File path</param>
	<returns>Content of file as string</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.FileSystem.FileManager.WriteBinaryFile(System.String,System.Byte[])">
	<summary>
 Create and write a binary file
 </summary>
	<param name="filePath">File path</param>
	<param name="bytes">Content as byte array</param>
	<returns>True if successfull; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.FileSystem.FileManager.WriteTextFile(System.String,System.String)">
	<summary>
 Create and write a text file
 </summary>
	<param name="filePath">File path</param>
	<param name="text">Content as string</param>
	<returns>True if successfull; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.#ctor(System.String)">
	<summary>
 Constructor
 </summary>
	<param name="logName">File log name</param>
	<remarks></remarks>
</member><member name="P:Topgraf.Logger.Logger4Net.IsDebugEnabled">
	<summary>
 Is debug log level enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Logger.Logger4Net.IsErrorEnabled">
	<summary>
 Is error log level enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Logger.Logger4Net.IsFatalEnabled">
	<summary>
 Is fatal log level enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Logger.Logger4Net.IsInfoEnabled">
	<summary>
 Is information log level enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Logger.Logger4Net.IsWarnEnabled">
	<summary>
 Is warning log level enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogDebug(System.String)">
	<summary>
 Write to log with debug level
 </summary>
	<param name="message">Message to write in log</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogDebug(System.String,System.Exception)">
	<summary>
 Write to log with debug level
 </summary>
	<param name="message">Message to write in log</param>
	<param name="e">Exception</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogDebug(System.Exception,System.String,System.Object[])">
	<summary>
 Write to log with debug level
 </summary>
	<param name="e">Exception</param>
	<param name="message">Message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogDebug(System.String,System.Object[])">
	<summary>
 Write to log with debug level
 </summary>
	<param name="format">Format of message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogError(System.String)">
	<summary>
 Write to log with error level
 </summary>
	<param name="message">Message to write in log</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogError(System.String,System.Exception)">
	<summary>
 Write to log with error level
 </summary>
	<param name="message">Message to write in log</param>
	<param name="e">Exception</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogError(System.Exception,System.String,System.Object[])">
	<summary>
 Write to log with error level
 </summary>
	<param name="e">Exception</param>
	<param name="message">Message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogError(System.String,System.Object[])">
	<summary>
 Write to log with error level
 </summary>
	<param name="format">Format of message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogFatal(System.String)">
	<summary>
 Write to log with fatal level
 </summary>
	<param name="message">Message to write in log</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogFatal(System.String,System.Exception)">
	<summary>
 Write to log with fatal level
 </summary>
	<param name="message">Message to write in log</param>
	<param name="e">Exception</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogFatal(System.Exception,System.String,System.Object[])">
	<summary>
 Write to log with fatal level
 </summary>
	<param name="e">Exception</param>
	<param name="message">Message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogFatal(System.String,System.Object[])">
	<summary>
 Write to log with fatal level
 </summary>
	<param name="format">Format of message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogInfo(System.String)">
	<summary>
 Write to log with information level
 </summary>
	<param name="message">Message to write in log</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogInfo(System.String,System.Exception)">
	<summary>
 Write to log with information level
 </summary>
	<param name="message">Message to write in log</param>
	<param name="e">Exception</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogInfo(System.Exception,System.String,System.Object[])">
	<summary>
 Write to log with information level
 </summary>
	<param name="e">Exception</param>
	<param name="message">Message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogInfo(System.String,System.Object[])">
	<summary>
 Write to log with information level
 </summary>
	<param name="format">Format of message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogWarn(System.String)">
	<summary>
 Write to log with warning level
 </summary>
	<param name="message">Message to write in log</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogWarn(System.String,System.Exception)">
	<summary>
 Write to log with warning level
 </summary>
	<param name="message">Message to write in log</param>
	<param name="e">Exception</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogWarn(System.Exception,System.String,System.Object[])">
	<summary>
 Write to log with warning level
 </summary>
	<param name="e">Exception</param>
	<param name="message">Message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Logger.Logger4Net.LogWarn(System.String,System.Object[])">
	<summary>
 Write to log with warning level
 </summary>
	<param name="format">Format of message to write in log</param>
	<param name="args">Arguments to format the message</param>
	<remarks></remarks>
</member><member name="P:Topgraf.Web.SqlTableProfileProvider.ApplicationName">
	<summary>
 Application name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.DeleteInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<param name="userInactiveSinceDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.DeleteProfiles(System.String[])">
	<summary>
	</summary>
	<param name="usernames"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.DeleteProfiles(System.Web.Profile.ProfileInfoCollection)">
	<summary>
	</summary>
	<param name="profiles"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.FindInactiveProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<param name="usernameToMatch"></param>
	<param name="userInactiveSinceDate"></param>
	<param name="pageIndex"></param>
	<param name="pageSize"></param>
	<param name="totalRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.FindProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<param name="usernameToMatch"></param>
	<param name="pageIndex"></param>
	<param name="pageSize"></param>
	<param name="totalRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetAllInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<param name="userInactiveSinceDate"></param>
	<param name="pageIndex"></param>
	<param name="pageSize"></param>
	<param name="totalRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetAllProfiles(System.Web.Profile.ProfileAuthenticationOption,System.Int32,System.Int32,System.Int32@)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<param name="pageIndex"></param>
	<param name="pageSize"></param>
	<param name="totalRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetNumberOfInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<param name="userInactiveSinceDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
	<summary>
	</summary>
	<param name="context"></param>
	<param name="collection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
	<summary>
	</summary>
	<param name="context"></param>
	<param name="collection"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
	<summary>
	</summary>
	<param name="name"></param>
	<param name="config"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetDefaultAppName">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetConnectionString(System.String)">
	<summary>
	</summary>
	<param name="specifiedConnectionString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Web.SqlTableProfileProvider.CommandTimeout">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Web.SqlTableProfileProvider.AppID">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GenerateTempInsertQueryForGetProfiles(System.Web.Profile.ProfileAuthenticationOption)">
	<summary>
	</summary>
	<param name="authenticationOption"></param>
	<returns></returns>
	<remarks>TODO: Implement size</remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GenerateQuery(System.Boolean,System.Web.Profile.ProfileAuthenticationOption)">
	<summary>
	</summary>
	<param name="delete"></param>
	<param name="authenticationOption"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.CreateInputParam(System.String,System.Data.SqlDbType,System.Object)">
	<summary>
	</summary>
	<param name="paramName"></param>
	<param name="dbType"></param>
	<param name="objValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.CreateOutputParam(System.String,System.Data.SqlDbType,System.Int32)">
	<summary>
	</summary>
	<param name="paramName"></param>
	<param name="dbType"></param>
	<param name="size"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetProfilesForQuery(System.Data.SqlClient.SqlParameter[],System.Int32,System.Int32,System.Text.StringBuilder,System.Int32@)">
	<summary>
	</summary>
	<param name="insertArgs"></param>
	<param name="pageIndex"></param>
	<param name="pageSize"></param>
	<param name="insertQuery"></param>
	<param name="totalRecords"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.GetProfileDataFromTable(System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsPropertyValueCollection,System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
	</summary>
	<param name="properties"></param>
	<param name="svc"></param>
	<param name="username"></param>
	<param name="conn"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.ProfileColumnData.#ctor(System.String,System.Configuration.SettingsPropertyValue,System.Object,System.Data.SqlDbType,System.Boolean)">
	<summary>
	</summary>
	<param name="Col"></param>
	<param name="pv"></param>
	<param name="val"></param>
	<param name="type"></param>
	<param name="isNullable"></param>
	<remarks></remarks>
</member><member name="T:Topgraf.Web.SqlTableProfileProvider.ProfileColumnData">
	<summary>
 Container struct for use in aggregating columns for queries
 </summary>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.EnsureValidTableOrColumnName(System.String)">
	<summary>
	</summary>
	<param name="name"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlTableProfileProvider.UpdateLastActivityDate(System.Data.SqlClient.SqlConnection,System.Guid)">
	<summary>
	</summary>
	<param name="conn"></param>
	<param name="userID"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.CreateAndOpenConnection(System.Data.SqlClient.SqlConnection@,System.String)">
	<summary>
 Create and open a connection to SQL server database
 </summary>
	<param name="conn">SqlConnection object</param>
	<param name="connString">Connection string</param>
	<returns>True if connection is created and opened; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.CloseAndDestroyConnection(System.Data.SqlClient.SqlConnection@)">
	<summary>
 Close and destroy a SQL Server database connection
 </summary>
	<param name="conn">SqlConnection object</param>
	<returns>True if connection is closed and destroyied; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.DateTime)">
	<summary>
 Format a date for SQL statement
 </summary>
	<param name="source">Date source</param>
	<returns>SQL formatted string for a date</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.String)">
	<summary>
 Format a string for SQL statement
 </summary>
	<param name="source">String</param>
	<returns>SQL formatted string for a string</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Byte)">
	<summary>
 Format a byte for SQL statement
 </summary>
	<param name="source">Byte object</param>
	<returns>SQL formatted string for a byte</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Int16)">
	<summary>
 Format a integer for SQL statement
 </summary>
	<param name="source">Integer object</param>
	<returns>SQL formatted string for a integer</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Int32)">
	<summary>
 Format a integer for SQL statement
 </summary>
	<param name="source">Integer object</param>
	<returns>SQL formatted string for a integer</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Int64)">
	<summary>
 Format a int64 for SQL statement
 </summary>
	<param name="source">Int64 object</param>
	<returns>SQL formatted string for a int64</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Single)">
	<summary>
 Format a single for SQL statement
 </summary>
	<param name="source">Single object</param>
	<returns>SQL formatted string for a single</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Double)">
	<summary>
 Format a double for SQL statement
 </summary>
	<param name="source">Double object</param>
	<returns>SQL formatted string for a double</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Decimal)">
	<summary>
 Format a decimal for SQL statement
 </summary>
	<param name="source">Decimal object</param>
	<returns>SQL formatted string for a double</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.FormatToSQL(System.Boolean)">
	<summary>
 Format a boolean for SQL statement
 </summary>
	<param name="source">Date source</param>
	<returns>SQL formatted string for a date</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.GetDataTableFromStoredProcedure(System.String,System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.Int32@)">
	<summary>
 Restituisce il DataTable dal risultato di una stored procedure
 </summary>
	<param name="connectionString">Stringa di connessione al database</param>
	<param name="storedProcedureName">Nome della stored procedure</param>
	<param name="parameters">Eventuali parametri per la stored procedure</param>
	<param name="total">Totale record estratti dall'esecuzione della stored procedure (output)</param>
	<returns>DataTable</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.GetDataTableFromStoredProcedure(System.Data.SqlClient.SqlConnection@,System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter}@,System.Int32@)">
	<summary>
 Restituisce il DataTable dal risultato di una stored procedure
 </summary>
	<param name="connection">Connessione al database</param>
	<param name="storedProcedureName">Nome della stored procedure</param>
	<param name="parameters">Eventuali parametri per la stored procedure</param>
	<param name="total">Totale record estratti dall'esecuzione della stored procedure (output)</param>
	<returns>DataTable</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.GetDataTableFromQuery(System.String,System.String,System.Int32@)">
	<summary>
 Restituisce il DataTable dal risultato di una query
 </summary>
	<param name="connectionString">Stringa di connessione al database</param>
	<param name="sqlStatement">Query da eseguire</param>
	<param name="total">Totale record estratti dall'esecuzione della stored procedure (output)</param>
	<returns>DataTable</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.SqlDbUtils.GetDataTableFromQuery(System.Data.SqlClient.SqlConnection@,System.String,System.Int32@)">
	<summary>
 Restituisce il DataTable dal risultato di una query
 </summary>
	<param name="connection">Connessione al database</param>
	<param name="sqlStatement">Query da eseguire</param>
	<param name="total">Totale record estratti dall'esecuzione della stored procedure (output)</param>
	<returns>DataTable</returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.CONNECTIONSTRING_TopLibrary">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_SMTP">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_SMTP_Port">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_SMTP_SSL">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_FromAddress">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_FromName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_Username">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_Password">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Base.Constants.AlarmMail_ReplyTo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.COMObjectManager.ReleaseObject(System.Object)">
	<summary>
 Release a COM Object resources
 </summary>
	<param name="comObject">COM object</param>
	<returns>True if the COM object resources was release. False Otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertToULong(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertToLong(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertToInteger(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertAsciiToLong(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertAsciiToInteger(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertToString(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.ConvertAsciiToString(System.Int32,System.Byte[],System.Int32)">
	<summary>
	</summary>
	<param name="startIndex"></param>
	<param name="buffer"></param>
	<param name="len"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.BufferToString(System.Byte[])">
	<summary>
	</summary>
	<param name="buffer"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.GetAsciiCode(System.String,System.Char)">
	<summary>
	</summary>
	<param name="tp"></param>
	<param name="c"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.GetBit(System.Int64,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="data"></param>
	<param name="index"></param>
	<param name="wordLen"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.WhoIAm(System.Reflection.MethodBase)">
	<summary>
	</summary>
	<param name="mb"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.Utility.GetMsFrom1970">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.GetUnixUniversalTime">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.GetUnixLocalTime">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.ParseFromUnix(System.Int32)">
	<summary>
	</summary>
	<param name="unixDT"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.ParseFromUnix_Base2(System.String)">
	<summary>
	</summary>
	<param name="bits"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.ParseFromUnix_Base16(System.String)">
	<summary>
	</summary>
	<param name="hex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.CheckTime(System.Int32)">
	<summary>
	</summary>
	<param name="minutes"></param>
	<returns>Return true one minute before the time specified</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DateTimeManager.CheckWorkingTimeToExecution(System.Int32)">
	<summary>
	</summary>
	<param name="minutes"></param>
	<returns>Return true one minute before the time specified</returns>
	<remarks></remarks>
</member><member name="P:Topgraf.My.Resources.Resources.ResourceManager">
	<summary>
  Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
</summary>
</member><member name="P:Topgraf.My.Resources.Resources.Culture">
	<summary>
  Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
  ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
</summary>
</member><member name="T:Topgraf.My.Resources.Resources">
	<summary>
  Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
</summary>
</member><member name="M:Topgraf.Utilities.AssemblyManager.WriteInformationToLog">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.IdentifyMethod(System.Reflection.MethodBase)">
	<summary>
 Return the complete name of the method
 </summary>
	<param name="mb">Method</param>
	<returns>Complete name of method</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetBoolean(System.String)">
	<summary>
 Retrieve boolean value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetByte(System.String)">
	<summary>
 Retrieve byte value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetChar(System.String)">
	<summary>
 Retrieve char value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetDateTime(System.String)">
	<summary>
 Retrieve datetime value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetDecimal(System.String)">
	<summary>
 Retrieve decimal value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetDouble(System.String)">
	<summary>
 Retrieve double value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetGuid(System.String)">
	<summary>
 Retrieve guid value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetInt16(System.String)">
	<summary>
 Retrieve Int16 value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetInt32(System.String)">
	<summary>
 Retrieve Int32 value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetInt64(System.String)">
	<summary>
 Retrieve Int64 value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetSByte(System.String)">
	<summary>
 Retrieve signed byte value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetSingle(System.String)">
	<summary>
 Retrieve single value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetString(System.String)">
	<summary>
 Retrieve string value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetUInt16(System.String)">
	<summary>
 Retrieve unsigned Int16 value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetUInt32(System.String)">
	<summary>
 Retrieve unsigned Int32 value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.AppSettings_GetUInt64(System.String)">
	<summary>
 Retrieve unsigned Int64 value from appSettings
 </summary>
	<param name="key">AppSettings key</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.ConnectionString_Get(System.String)">
	<summary>
 Return the connection string specified in .config file
 </summary>
	<param name="name">Name of the connection string</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.AssemblyManager.WriteConfigurationToLog">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Security.Hasher.ComputeHash(System.String,System.String,System.Byte[])">
	<summary>
 Generates a hash for the given plain text value and returns a
 base64-encoded result. Before the hash is computed, a random salt
 is generated and appended to the plain text. This salt is stored at
 the end of the hash value, so it can be used later for hash
 verification.
 </summary>
	<param name="plainText">Plaintext value to be hashed. The function does not check whether this parameter is null.</param>
	<param name="hashAlgorithm">Name of the hash algorithm. Allowed values are: "MD5", "SHA1", "SHA256", "SHA384", and "SHA512" (if any other value is specified MD5 hashing algorithm will be used). This value is case-insensitive.</param>
	<param name="saltBytes">This parameter can be null, in which case a random salt value will be generated.</param>
	<returns>Hash value formatted as a base64-encoded string.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Security.Hasher.VerifyHash(System.String,System.String,System.String,System.Byte[])">
	<summary>
 Compares a hash of the specified plain text value to a given hash
 value. Plain text is hashed with the same salt value as the original
 hash.
 </summary>
	<param name="plainText">Plain text to be verified against the specified hash. The function does not check whether this parameter is null.</param>
	<param name="hashAlgorithm">Name of the hash algorithm. Allowed values are: "MD5", "SHA1", "SHA256", "SHA384", and "SHA512" (if any other value is specified MD5 hashing algorithm will be used). This value is case-insensitive.</param>
	<param name="hashValue">Base64-encoded hash value produced by ComputeHash function. This value includes the original salt appended to it.</param>
	<param name="saltBytes">Salt bytes</param>
	<returns>If computed hash mathes the specified hash the function the return value is true; otherwise, the function returns false.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Security.Hasher.VerifyHashAndDate(System.String,System.String,System.Byte[])">
	<summary>
 Compares a hash of the specified plain text value to a given hash
 value. Plain text is hashed with the same salt value as the original
 hash. Check the date written in plain text
 </summary>
	<param name="filePath">File path</param>
	<param name="hashAlgorithm">Name of the hash algorithm. Allowed values are: "MD5", "SHA1", "SHA256", "SHA384", and "SHA512" (if any other value is specified MD5 hashing algorithm will be used). This value is case-insensitive.</param>
	<param name="saltBytes">Salt bytes</param>
	<returns>If computed hash mathes the specified hash and the date is not expired the function the return value is true; otherwise, the function returns false.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Security.Hasher.VerifyHashAndGetLicense(System.String,System.String,System.Byte[],Topgraf.Licensing.License@)">
	<summary>
 Compares a hash of the specified plain text value to a given hash
 value. Plain text is hashed with the same salt value as the original
 hash. Return the xml contained in cripted file
 </summary>
	<param name="filePath">File path</param>
	<param name="hashAlgorithm">Name of the hash algorithm. Allowed values are: "MD5", "SHA1", "SHA256", "SHA384", and "SHA512" (if any other value is specified MD5 hashing algorithm will be used). This value is case-insensitive.</param>
	<param name="saltBytes">Salt bytes</param>
	<param name="l">License information (returned)</param>
	<returns>If computed hash mathes the specified hash the function the return value is true; otherwise, the function returns false.</returns>
	<remarks></remarks>
</member><member name="T:Topgraf.Security.Hasher">
	<summary>
 This class generates and compares hashes using MD5, SHA1, SHA256, SHA384,
 and SHA512 hashing algorithms. Before computing a hash, it appends a
 randomly generated salt to the plain text, and stores this salt appended
 to the result. To verify another plain text value against the given hash,
 this class will retrieve the salt value from the hash string and use it
 when computing a new hash of the plain text. Appending a salt value to
 the hash may not be the most efficient approach, so when using hashes in
 a real-life application, you may choose to store them separately. You may
 also opt to keep results as byte arrays instead of converting them into
 base64-encoded strings.
 </summary>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.#ctor(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="port"></param>
	<param name="ssl"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.#ctor(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="username"></param>
	<param name="password"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="port"></param>
	<param name="ssl"></param>
	<param name="username"></param>
	<param name="password"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="P:Topgraf.Notification.EMailerTemplate.SmtpServer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Notification.EMailerTemplate.FromMailAddress">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMail(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean)">
	<summary>
 Send email
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMail(System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean)">
	<summary>
 Send Email
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMail(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Send email
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachmentPath">Attachment file path</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMail(System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean,System.String[])">
	<summary>
 Send Email
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="ccAddresses">Addresses to send email in CC</param>
	<param name="bccAddresses">Addresses to send email in BCC</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachments">Attachments file to send in email</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMailAsync(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean)">
	<summary>
 Send email Async
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMailAsync(System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean)">
	<summary>
 Send Email Async
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMailAsync(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Send email Async
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachmentPath">Attachment file path</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.SendEMailAsync(System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean,System.String[])">
	<summary>
 Send Email
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="ccAddresses">Addresses to send email in CC</param>
	<param name="bccAddresses">Addresses to send email in BCC</param>
	<param name="subjectTemplate">Email subject template</param>
	<param name="bodyTemplatePath">Email body template path</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachments">Attachments file to send in email</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.FormatSubject(System.String)">
	<summary>
	</summary>
	<param name="templateContent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailerTemplate.FormatBody(System.String)">
	<summary>
	</summary>
	<param name="templateContent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.DataSourceManager.SetSelectParameters(System.Web.UI.WebControls.AccessDataSource@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
	<summary>
 Imposta i parametri dell'AccessDataSource
 </summary>
	<param name="ds">Data source</param>
	<param name="values">Valori parametri</param>
	<returns>True se non avvengono errori; False altrimenti</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.DataSourceManager.SetSelectParameters(System.Web.UI.WebControls.EntityDataSource@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
	<summary>
 Imposta i parametri dell'EntityDataSource
 </summary>
	<param name="ds">Data source</param>
	<param name="values">Valori parametri</param>
	<returns>True se non avvengono errori; False altrimenti</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.DataSourceManager.SetSelectParameters(System.Web.UI.WebControls.LinqDataSource@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
	<summary>
 Imposta i parametri del LinqDataSource
 </summary>
	<param name="ds">Data source</param>
	<param name="values">Valori parametri</param>
	<returns>True se non avvengono errori; False altrimenti</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.DataSourceManager.SetSelectParameters(System.Web.UI.WebControls.ObjectDataSource@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
	<summary>
 Imposta i parametri dell'ObjectDataSource
 </summary>
	<param name="ds">Data source</param>
	<param name="values">Valori parametri</param>
	<returns>True se non avvengono errori; False altrimenti</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.DataSourceManager.SetSelectParameters(System.Web.UI.WebControls.SqlDataSource@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
	<summary>
 Imposta i parametri del SqlDataSource
 </summary>
	<param name="ds">Data source</param>
	<param name="values">Valori parametri</param>
	<returns>True se non avvengono errori; False altrimenti</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.CreateAndOpenConnection(System.Data.OleDb.OleDbConnection@,System.String)">
	<summary>
 Create and open a connection to OleDb database
 </summary>
	<param name="conn">OleDbConnection object</param>
	<param name="connString">Connection string</param>
	<returns>True if connection is created and opened; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.CloseAndDestroyConnection(System.Data.OleDb.OleDbConnection@)">
	<summary>
 Close and destroy a OleDb database connection
 </summary>
	<param name="conn">OleDbConnection object</param>
	<returns>True if connection is closed and destroyied; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.DateTime)">
	<summary>
 Format a date for SQL statement
 </summary>
	<param name="source">Date source</param>
	<returns>SQL formatted string for a date</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.String)">
	<summary>
 Format a string for SQL statement
 </summary>
	<param name="source">String</param>
	<returns>SQL formatted string for a string</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Byte)">
	<summary>
 Format a byte for SQL statement
 </summary>
	<param name="source">Byte object</param>
	<returns>SQL formatted string for a byte</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Int16)">
	<summary>
 Format a integer for SQL statement
 </summary>
	<param name="source">Integer object</param>
	<returns>SQL formatted string for a integer</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Int32)">
	<summary>
 Format a int32 for SQL statement
 </summary>
	<param name="source">Int32 object</param>
	<returns>SQL formatted string for a integer</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Int64)">
	<summary>
 Format a int64 for SQL statement
 </summary>
	<param name="source">Int64 object</param>
	<returns>SQL formatted string for a int64</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Single)">
	<summary>
 Format a single for SQL statement
 </summary>
	<param name="source">Single object</param>
	<returns>SQL formatted string for a single</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Double)">
	<summary>
 Format a double for SQL statement
 </summary>
	<param name="source">Double object</param>
	<returns>SQL formatted string for a double</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Decimal)">
	<summary>
 Format a decimal for SQL statement
 </summary>
	<param name="source">Decimal object</param>
	<returns>SQL formatted string for a double</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.DataAccessLayer.OleDbUtils.FormatToSQL(System.Boolean)">
	<summary>
 Format a boolean for SQL statement
 </summary>
	<param name="source">Boolean object</param>
	<returns>SQL formatted string for a boolean</returns>
	<remarks>If an exception occurred return Nothing</remarks>
</member><member name="M:Topgraf.Licensing.LicManager.#ctor">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Topgraf.Licensing.LicManager.CreateLicenseFile(Topgraf.Licensing.License,System.String)">
	<summary>
	</summary>
	<param name="l">License information</param>
	<param name="licFilePath">License file path</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Licensing.LicManager.CheckLicense">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Licensing.LicManager.RunCheckLicense">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Topgraf.PLC.ModbusProtocolManager.MODBUS_MESSAGE_TYPE">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Topgraf.PLC.ModbusProtocolManager.MODBUS_FUNCTION">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Topgraf.PLC.ModbusProtocolManager.MODBUS_PROTOCOL">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="F:Topgraf.PLC.ModbusProtocolManager.SIGNED_INT">
	<summary>
 Types
 </summary>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.MessageRTU">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.MessageASCII">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.MessageTCP">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.BufferRTU">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.BufferASCII">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.BufferTCP">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.Data">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.StrData">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.TransactionIdentifier">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.Format">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.Buffer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.PLC.ModbusProtocolManager.ModbusProtocol">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.#ctor(Topgraf.PLC.ModbusProtocolManager.MODBUS_PROTOCOL)">
	<summary>
	</summary>
	<param name="modbusProtocol"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.#ctor(System.Byte[],Topgraf.PLC.ModbusProtocolManager.MODBUS_PROTOCOL,System.String)">
	<summary>
	</summary>
	<param name="message"></param>
	<param name="modbusProtocol"></param>
	<param name="format"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create04(System.Int32,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="address"></param>
	<param name="registerNumber"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create06(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="address"></param>
	<param name="data"></param>
	<param name="len"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create16_Long(System.Int32,System.Int32,System.Int32,System.Int64)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="address"></param>
	<param name="registerNumber"></param>
	<param name="data"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create16_String(System.Int32,System.Int32,System.Int32,System.String,System.String)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="address"></param>
	<param name="registerNumber"></param>
	<param name="data"></param>
	<param name="format"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create16_Buffer(System.Int32,System.Int32,System.Int32,System.Byte[])">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="address"></param>
	<param name="registerNumber"></param>
	<param name="data"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create16_Buffer_Bis(System.Int32,System.Int32,System.Int32,System.Byte[])">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="address"></param>
	<param name="registerNumber"></param>
	<param name="data"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create23(System.Int32,System.Int32,System.Int64)">
	<summary>
	</summary>
	<param name="node"></param>
	<param name="numMeasures"></param>
	<param name="index"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.Create17(System.Int32)">
	<summary>
	</summary>
	<param name="node"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.GetData(System.Byte[],System.Int32,Topgraf.PLC.ModbusProtocolManager.MODBUS_PROTOCOL,System.String)">
	<summary>
	</summary>
	<param name="data"></param>
	<param name="len"></param>
	<param name="modbusProtocol"></param>
	<param name="format"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.MsbLsb(System.Int64,System.Int32)">
	<summary>
	</summary>
	<param name="v"></param>
	<param name="length"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.LsbMsb(System.Int32)">
	<summary>
 From integer to LSB + MSB (2 chars)
 </summary>
	<param name="v"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.BuildCrc(System.String)">
	<summary>
 RTU CRC
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.BuildLrc(System.Byte[])">
	<summary>
 ASCII LRC
 </summary>
	<param name="buffer"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.GetExpectedLen">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.DataToString">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.ModbusProtocolManager.ToString">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.HTMLManager.GetBlock(System.String,System.String)">
	<summary>
 Retrieve a text block in HTML Text. The block must be start with
 "<!--BEGIN[NOMEBLOCCO]-->" and terminate with "<!--END[NOMEBLOCCO]-->"
 </summary>
	<param name="html">Html text</param>
	<param name="blockName">Name of block</param>
	<returns>Block content</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.HTMLManager.ReplaceBlock(System.String@,System.String,System.String)">
	<summary>
 Replace a text block into HTML Text. The block must be start with
 "<!--BEGIN[NOMEBLOCCO]-->" and terminate with "<!--END[NOMEBLOCCO]-->"
 </summary>
	<param name="html">Html text</param>
	<param name="blockName">Name of block</param>
	<param name="htmlBlock">Block replacing text</param>
	<returns>True if successfull. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.HTMLManager.HtmlEncode(System.String)">
	<summary>
 Encode text to HTML
 </summary>
	<param name="s">Source string</param>
	<returns>String HTML formatted</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.HTMLManager.HtmlDecode(System.String)">
	<summary>
 Decode HTML to text
 </summary>
	<param name="s">Source HTML text</param>
	<returns>String decoded from HTML</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.LibManager.InitializeLibrary(System.String)">
	<summary>
 Inizializza la libreria.
 Richiede il nome del logger log4net (come definito in web.config).
 </summary>
	<param name="loggerName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.LibManager.InitializeLibrary(System.String,System.String)">
	<summary>
 Inizializza la libreria.
 Richiede il nome del logger log4net (come definito in web.config).
 Se si specifica il logpath, definire la configurazione
 (cfr: http://devwiki.topgraf.it/index.php/Log4net)
 </summary>
	<param name="loggerName"></param>
	<param name="logpath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.LibManager.CloseUp">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Topgraf.Licensing.License.ApplicationName">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Licensing.License.CheckLicense">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Licensing.License.ExpirationDate">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.MessageQueueManager.GetQueue(System.String)">
	<summary>
 Get message queue object specified by queue Path
 </summary>
	<param name="queuePath">Queue path</param>
	<returns>MessageQueue object</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.MessageQueueManager.DeleteQueue(System.String)">
	<summary>
 Delete the specified Queue
 </summary>
	<param name="queuePath">Queue path</param>
	<returns>True if delete; False otherwise</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.MessageQueueManager.GetMessage``1(System.Messaging.MessageQueue@)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="mq"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.#ctor(System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.#ctor(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="port"></param>
	<param name="ssl"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.#ctor(System.String,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="username"></param>
	<param name="password"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="smtpServer"></param>
	<param name="port"></param>
	<param name="ssl"></param>
	<param name="username"></param>
	<param name="password"></param>
	<param name="fromName"></param>
	<param name="fromAddress"></param>
	<remarks></remarks>
</member><member name="P:Topgraf.Notification.EMailer.SmtpServer">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Notification.EMailer.FromMailAddress">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Topgraf.Notification.EMailer.ReplyTo">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMail(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean)">
	<summary>
 Send email
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMail(System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean)">
	<summary>
 Send Email
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMail(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Send email
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachmentPath">Attachment file path</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMail(System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean,System.String[])">
	<summary>
 Send Email
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="ccAddresses">Addresses to send email in CC</param>
	<param name="bccAddresses">Addresses to send email in BCC</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachments">Attachments file to send in email</param>
	<returns>True if email was sent. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMailAsync(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean)">
	<summary>
 Send email Async
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMailAsync(System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean)">
	<summary>
 Send Email Async
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMailAsync(System.Net.Mail.MailAddress,System.String,System.String,System.Boolean,System.String)">
	<summary>
 Send email Async
 </summary>
	<param name="toAddress">Address to send email</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachmentPath">Attachment file path</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Notification.EMailer.SendEMailAsync(System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.String,System.String,System.Boolean,System.String[])">
	<summary>
 Send Email
 </summary>
	<param name="toAddresses">Addresses to send email</param>
	<param name="ccAddresses">Addresses to send email in CC</param>
	<param name="bccAddresses">Addresses to send email in BCC</param>
	<param name="subject">Email subject</param>
	<param name="body">Email body</param>
	<param name="isHtml">Is body HTML</param>
	<param name="attachments">Attachments file to send in email</param>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.XMLManager.Serialize``1(System.Object)">
	<summary>
 Serialize an object of the specified type
 </summary>
	<param name="o">Object to serialize</param>
	<returns>Xml string that rappresent the object</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.XMLManager.Serialize``1(System.Object,System.String)">
	<summary>
 Serialize an object of the specified type
 </summary>
	<param name="o">Object to serialize</param>
	<param name="customNamespace">Namespace to set in XML</param>
	<returns>Xml string that rappresent the object</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.XMLManager.Serialize``1(System.Object,System.Text.Encoding)">
	<summary>
 Serialize an object of the specified type
 </summary>
	<param name="o">Object to serialize</param>
	<param name="customEncoding">Encoding to set in XML</param>
	<returns>Xml string that rappresent the object</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.XMLManager.Deserialize``1(System.String)">
	<summary>
 Deserialize an xml to a object of the specified type
 </summary>
	<param name="xml">Xml to deserialize</param>
	<returns>Object of specified type</returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Utilities.XMLManager.XML_LoadFromFile(System.String)">
	<summary>
	</summary>
	<param name="xmlFilePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlInjectionScreeningModule.Dispose">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlInjectionScreeningModule.Init(System.Web.HttpApplication)">
	<summary>
	</summary>
	<param name="context"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlInjectionScreeningModule.App_BeginRequest(System.Object,System.EventArgs)">
	<summary>
	</summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlInjectionScreeningModule.CheckInput(System.String)">
	<summary>
 The utility method that performs the blacklist comparisons.
 You can change the error handling, and error redirect location to whatever makes sense for your site.
 </summary>
	<param name="parameter"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.Web.SqlInjectionScreeningModule.ExitApp">
	<summary>
 Exit from web application
 </summary>
	<remarks></remarks>
</member><member name="T:Topgraf.Web.SqlInjectionScreeningModule">
	<summary>
	</summary>
	<remarks>
 In web.config insert the section:
    <system.web>
			<httpModules>
				<add name="SqlInjectionScreeningModule" type="SqlInjectionScreeningModule"/>
			</httpModules>
		</system.web>
	</remarks>
</member><member name="M:Topgraf.PLC.PLCModbusSocket.#ctor(Topgraf.PLC.ModbusProtocolManager.MODBUS_PROTOCOL,System.String,System.Int32,System.Int32,System.Int32)">
	<summary>
	</summary>
	<param name="ipAddress"></param>
	<param name="socketPort"></param>
	<param name="receiveTimeout"></param>
	<param name="sendTimeout"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.PLCModbusSocket.OpenConnection">
	<summary>
	</summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.PLCModbusSocket.CloseConnection">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.PLCModbusSocket.Send(System.Byte[])">
	<summary>
	</summary>
	<param name="buffer"></param>
	<remarks></remarks>
</member><member name="M:Topgraf.PLC.PLCModbusSocket.Receive(System.Byte)">
	<summary>
	</summary>
	<param name="expectedLen"></param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>